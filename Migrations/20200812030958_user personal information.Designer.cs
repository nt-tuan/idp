// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThanhTuan.IDP.Data;

namespace ThanhTuan.IDP.Migrations
{
  [DbContext(typeof(ApplicationDbContext))]
  [Migration("20200812030958_user personal information")]
  partial class userpersonalinformation
  {
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
          .HasAnnotation("ProductVersion", "3.1.6")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<string>("ClaimType")
                      .HasColumnType("text");

            b.Property<string>("ClaimValue")
                      .HasColumnType("text");

            b.Property<string>("RoleId")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<string>("ClaimType")
                      .HasColumnType("text");

            b.Property<string>("ClaimValue")
                      .HasColumnType("text");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnType("character varying(128)")
                      .HasMaxLength(128);

            b.Property<string>("ProviderKey")
                      .HasColumnType("character varying(128)")
                      .HasMaxLength(128);

            b.Property<string>("ProviderDisplayName")
                      .HasColumnType("text");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("text");

            b.Property<string>("RoleId")
                      .HasColumnType("text");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("text");

            b.Property<string>("LoginProvider")
                      .HasColumnType("character varying(128)")
                      .HasMaxLength(128);

            b.Property<string>("Name")
                      .HasColumnType("character varying(128)")
                      .HasMaxLength(128);

            b.Property<string>("Value")
                      .HasColumnType("text");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens");
          });

      modelBuilder.Entity("dmc_auth.Entities.ApplicationRole", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("text");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("text");

            b.Property<string>("Description")
                      .HasColumnType("text");

            b.Property<string>("Name")
                      .HasColumnType("character varying(256)")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedName")
                      .HasColumnType("character varying(256)")
                      .HasMaxLength(256);

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasName("RoleNameIndex");

            b.ToTable("AspNetRoles");
          });

      modelBuilder.Entity("dmc_auth.Entities.ApplicationUser", b =>
          {
            b.Property<string>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("text");

            b.Property<int>("AccessFailedCount")
                      .HasColumnType("integer");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("text");

            b.Property<string>("Email")
                      .HasColumnType("character varying(256)")
                      .HasMaxLength(256);

            b.Property<bool>("EmailConfirmed")
                      .HasColumnType("boolean");

            b.Property<int?>("EmployeeId")
                      .HasColumnType("integer");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnType("boolean");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("NormalizedEmail")
                      .HasColumnType("character varying(256)")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedUserName")
                      .HasColumnType("character varying(256)")
                      .HasMaxLength(256);

            b.Property<string>("PasswordHash")
                      .HasColumnType("text");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("text");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnType("boolean");

            b.Property<string>("SecurityStamp")
                      .HasColumnType("text");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnType("boolean");

            b.Property<string>("UserName")
                      .HasColumnType("character varying(256)")
                      .HasMaxLength(256);

            b.HasKey("Id");

            b.HasIndex("EmployeeId");

            b.HasIndex("NormalizedEmail")
                      .HasName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasName("UserNameIndex");

            b.ToTable("AspNetUsers");
          });

      modelBuilder.Entity("dmc_auth.Entities.Department", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<string>("Code")
                      .HasColumnType("text");

            b.Property<string>("FullName")
                      .HasColumnType("text");

            b.Property<string>("Location")
                      .HasColumnType("text");

            b.Property<string>("Location2")
                      .HasColumnType("text");

            b.Property<string>("Location3")
                      .HasColumnType("text");

            b.Property<int?>("ManagerId")
                      .HasColumnType("integer");

            b.Property<int?>("ParentId")
                      .HasColumnType("integer");

            b.Property<string>("Phone")
                      .HasColumnType("text");

            b.Property<string>("Phone2")
                      .HasColumnType("text");

            b.Property<string>("Phone3")
                      .HasColumnType("text");

            b.Property<string>("ShortName")
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("ManagerId");

            b.HasIndex("ParentId");

            b.ToTable("Departments");
          });

      modelBuilder.Entity("dmc_auth.Entities.Employee", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<string>("Address")
                      .HasColumnType("text");

            b.Property<string>("AppUserId")
                      .HasColumnType("text");

            b.Property<DateTime?>("Birthday")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("Code")
                      .HasColumnType("text");

            b.Property<int?>("DepartmentId")
                      .HasColumnType("integer");

            b.Property<string>("DisplayName")
                      .HasColumnType("text");

            b.Property<string>("Email")
                      .HasColumnType("text");

            b.Property<string>("FirstName")
                      .HasColumnType("text");

            b.Property<string>("FullName")
                      .HasColumnType("text");

            b.Property<int>("Gender")
                      .HasColumnType("integer");

            b.Property<string>("IdentityNumber")
                      .HasColumnType("text");

            b.Property<string>("LastName")
                      .HasColumnType("text");

            b.Property<string>("Phone")
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("DepartmentId");

            b.ToTable("Employees");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.HasOne("dmc_auth.Entities.ApplicationRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.HasOne("dmc_auth.Entities.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.HasOne("dmc_auth.Entities.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.HasOne("dmc_auth.Entities.ApplicationRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("dmc_auth.Entities.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.HasOne("dmc_auth.Entities.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("dmc_auth.Entities.ApplicationUser", b =>
          {
            b.HasOne("dmc_auth.Entities.Employee", "Employee")
                      .WithMany()
                      .HasForeignKey("EmployeeId");
          });

      modelBuilder.Entity("dmc_auth.Entities.Department", b =>
          {
            b.HasOne("dmc_auth.Entities.Employee", "Manager")
                      .WithMany()
                      .HasForeignKey("ManagerId");

            b.HasOne("dmc_auth.Entities.Department", "Parent")
                      .WithMany()
                      .HasForeignKey("ParentId");
          });

      modelBuilder.Entity("dmc_auth.Entities.Employee", b =>
          {
            b.HasOne("dmc_auth.Entities.Department", "Department")
                      .WithMany()
                      .HasForeignKey("DepartmentId");
          });
#pragma warning restore 612, 618
    }
  }
}
